[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudProcessor::process_pointcloud(const ConstPtr&)[m[Kâ€™:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:80:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator*[m[Kâ€™ (operand types are â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} and â€˜[01m[KEigen::Matrix4f[m[Kâ€™ {aka â€˜[01m[KEigen::Matrix<float, 4, 4>[m[Kâ€™})
  469 |     Eigen::Matrix4f transformation_icp = icp_registration([32m[Kcurrent_frame_points[m[K [01;31m[K*[m[K [34m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                           [32m[K~~~~~~~~~~~~~~~~~~~~[m[K [01;31m[K^[m[K [34m[K~~~~~~~~~~~~~~~~~~[m[K
      |                                                           [32m[K|[m[K                      [34m[K|[m[K
      |                                                           [32m[K|[m[K                      [34m[KEigen::Matrix4f {aka Eigen::Matrix<float, 4, 4>}[m[K
      |                                                           [32m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr {aka boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >}[m[K
In file included from [01m[K/usr/include/boost/shared_ptr.hpp:17[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/forwards.h:37[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/common.h:37[m[K,
                 from [01m[K/opt/ros/noetic/include/ros/ros.h:43[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:4[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/boost/smart_ptr/shared_ptr.hpp:726:55:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktypename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = pcl::PointCloud<pcl::PointXYZ>; typename boost::detail::sp_dereference<T>::type = pcl::PointCloud<pcl::PointXYZ>&][m[Kâ€™
  726 |     typename boost::detail::sp_dereference< T >::type [01;36m[Koperator[m[K* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
      |                                                       [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/boost/smart_ptr/shared_ptr.hpp:726:55:[m[K [01;36m[Knote: [m[K  candidate expects 0 arguments, 1 provided
In file included from [01m[K/usr/include/eigen3/Eigen/Core:487[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/PermutationMatrix.h:543:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class MatrixDerived, class PermutationDerived> const Eigen::Product<MatrixDerived, PermutationDerived, 2> Eigen::operator*(const Eigen::MatrixBase<Derived>&, const Eigen::PermutationBase<PermutationDerived>&)[m[Kâ€™
  543 | [01;36m[Koperator[m[K*(const MatrixBase<MatrixDerived> &matrix,
      | [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/PermutationMatrix.h:543:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::MatrixBase<Derived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:487[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/PermutationMatrix.h:555:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class PermutationDerived, class MatrixDerived> const Eigen::Product<MatrixDerived, PermutationDerived, 2> Eigen::operator*(const Eigen::PermutationBase<PermutationDerived>&, const Eigen::MatrixBase<U>&)[m[Kâ€™
  555 | [01;36m[Koperator[m[K*(const PermutationBase<PermutationDerived> &permutation,
      | [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/PermutationMatrix.h:555:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::PermutationBase<PermutationDerived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:488[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Transpositions.h:338:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class MatrixDerived, class TranspositionsDerived> const Eigen::Product<MatrixDerived, PermutationDerived, 2> Eigen::operator*(const Eigen::MatrixBase<Derived>&, const Eigen::TranspositionsBase<TranspositionsDerived>&)[m[Kâ€™
  338 | [01;36m[Koperator[m[K*(const MatrixBase<MatrixDerived> &matrix,
      | [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Transpositions.h:338:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::MatrixBase<Derived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:488[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Core/Transpositions.h:350:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class TranspositionsDerived, class MatrixDerived> const Eigen::Product<MatrixDerived, PermutationDerived, 2> Eigen::operator*(const Eigen::TranspositionsBase<TranspositionsDerived>&, const Eigen::MatrixBase<U>&)[m[Kâ€™
  350 | [01;36m[Koperator[m[K*(const TranspositionsBase<TranspositionsDerived> &transpositions,
      | [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Core/Transpositions.h:350:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::TranspositionsBase<TranspositionsDerived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Householder:24[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/QR:17[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/SVD:11[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/Geometry:15[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:46[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Householder/HouseholderSequence.h:438:99:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class OtherDerived, class VectorsType, class CoeffsType, int Side> typename Eigen::internal::matrix_type_times_scalar_type<typename VectorsType::Scalar, OtherDerived>::Type Eigen::operator*(const Eigen::MatrixBase<Derived>&, const Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>&)[m[Kâ€™
  438 | typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::Type [01;36m[Koperator[m[K*(const MatrixBase<OtherDerived>& other, const HouseholderSequence<VectorsType,CoeffsType,Side>& h)
      |                                                                                                   [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Householder/HouseholderSequence.h:438:99:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::MatrixBase<Derived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Geometry:46[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:46[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Scaling.h:117:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class Derived, class Scalar> Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<typename Eigen::internal::traits<T>::Scalar, Scalar>, const Derived, const typename Eigen::internal::plain_constant_type<Expr, Scalar>::type> Eigen::operator*(const Eigen::MatrixBase<Derived>&, const Eigen::UniformScaling<Scalar>&)[m[Kâ€™
  117 | [01;36m[Koperator[m[K*(const MatrixBase<Derived>& matrix, const UniformScaling<Scalar>& s)
      | [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Scaling.h:117:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst Eigen::MatrixBase<Derived>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Core:88[m[K,
                 from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:7[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h:50:1:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class T> typename Eigen::internal::enable_if<true, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<typename Eigen::internal::promote_scalar_arg<float, T, Eigen::internal::has_ReturnType<Eigen::ScalarBinaryOpTraits<T, float, Eigen::internal::scalar_product_op<T, float> > >::value>::type, float>, const typename Eigen::internal::plain_constant_type<Eigen::Matrix<float, 4, 4>, typename Eigen::internal::promote_scalar_arg<float, T, Eigen::internal::has_ReturnType<Eigen::ScalarBinaryOpTraits<T, float, Eigen::internal::scalar_product_op<T, float> > >::value>::type>::type, const Eigen::Matrix<float, 4, 4> > >::type Eigen::operator*(const T&, const StorageBaseType&)[m[Kâ€™
   50 | [01;36m[KEIGEN_MAKE_SCALAR_BINARY_OP[m[K(operator*,product)
      | [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h:50:1:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h: In substitution of â€˜[01m[Ktemplate<class T> typename Eigen::internal::enable_if<true, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<typename Eigen::internal::promote_scalar_arg<float, T, Eigen::internal::has_ReturnType<Eigen::ScalarBinaryOpTraits<T, float, Eigen::internal::scalar_product_op<T, float> > >::value>::type, float>, const typename Eigen::internal::plain_constant_type<Eigen::Matrix<float, 4, 4>, typename Eigen::internal::promote_scalar_arg<float, T, Eigen::internal::has_ReturnType<Eigen::ScalarBinaryOpTraits<T, float, Eigen::internal::scalar_product_op<T, float> > >::value>::type>::type, const Eigen::Matrix<float, 4, 4> > >::type Eigen::operator*(const T&, const StorageBaseType&) [with T = boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >][m[Kâ€™:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K   required from here
[01m[K/usr/include/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h:50:1:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct Eigen::internal::promote_scalar_arg<float, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >, false>[m[Kâ€™
In file included from [01m[K/usr/include/boost/property_map/property_map.hpp:21[m[K,
                 from [01m[K/usr/include/boost/graph/properties.hpp:19[m[K,
                 from [01m[K/usr/include/boost/graph/named_function_params.hpp:26[m[K,
                 from [01m[K/usr/include/boost/graph/dijkstra_shortest_paths.hpp:20[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/boost.h:48[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/registration.h:48[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/icp.h:47[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:14[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/boost/concept_archetype.hpp:316:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class Base> boost::multipliable_archetype<Base> boost::operator*(const boost::multipliable_archetype<Base>&, const boost::multipliable_archetype<Base>&)[m[Kâ€™
  316 |   [01;36m[KBOOST_DEFINE_OPERATOR_ARCHETYPE[m[K(*, multipliable)
      |   [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/boost/concept_archetype.hpp:316:3:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst boost::multipliable_archetype<Base>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/boost/property_map/property_map.hpp:21[m[K,
                 from [01m[K/usr/include/boost/graph/properties.hpp:19[m[K,
                 from [01m[K/usr/include/boost/graph/named_function_params.hpp:26[m[K,
                 from [01m[K/usr/include/boost/graph/dijkstra_shortest_paths.hpp:20[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/boost.h:48[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/registration.h:48[m[K,
                 from [01m[K/usr/include/pcl-1.10/pcl/registration/icp.h:47[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/include/point_process.h:14[m[K,
                 from [01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:1[m[K:
[01m[K/usr/include/boost/concept_archetype.hpp:344:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class Return, class BaseFirst, class BaseSecond> Return boost::operator*(const boost::time_op_first_archetype<Return, BaseFirst>&, const boost::time_op_second_archetype<Return, BaseSecond>&)[m[Kâ€™
  344 |   [01;36m[KBOOST_DEFINE_BINARY_OPERATOR_ARCHETYPE[m[K(*, time_op)
      |   [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/boost/concept_archetype.hpp:344:3:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:469:82:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr[m[Kâ€™ {aka â€˜[01m[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >[m[Kâ€™} is not derived from â€˜[01m[Kconst boost::time_op_first_archetype<Return, BaseFirst>[m[Kâ€™
  469 |     Eigen::Matrix4f transformation_icp = icp_registration(current_frame_points * [01;36m[Ktransformation_ndt[m[K, last_frame_points, Final_icp);
      |                                                                                  [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
make[2]: *** [CMakeFiles/lidar_slam.dir/build.make:76ï¼šCMakeFiles/lidar_slam.dir/src/point_process.cpp.o] é”™è¯¯ 1
make[1]: *** [CMakeFiles/Makefile2:2297ï¼šCMakeFiles/lidar_slam.dir/all] é”™è¯¯ 2
make: *** [Makefile:141ï¼šall] é”™è¯¯ 2
