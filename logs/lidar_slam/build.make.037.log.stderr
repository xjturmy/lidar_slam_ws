[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudProcessor::process_pointcloud(const ConstPtr&)[m[Kâ€™:
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:434:25:[m[K [01;31m[Kerror: [m[Kinvalid use of member function â€˜[01m[Kstd::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = Eigen::Matrix<float, 4, 4>; _Alloc = std::allocator<Eigen::Matrix<float, 4, 4> >; std::vector<_Tp, _Alloc>::size_type = long unsigned int][m[Kâ€™ (did you forget the â€˜[01m[K()[m[Kâ€™ ?)
  434 |     if ([01;31m[Ktransformations.size[m[K == 20)
      |         [01;31m[K~~~~~~~~~~~~~~~~^~~~[m[K
      |                             [32m[K()[m[K
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:444:28:[m[K [01;31m[Kerror: [m[Kcannot convert â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst Ptr&[m[Kâ€™ {aka â€˜[01m[Kconst boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >&[m[Kâ€™}
  444 |         publish_pointcloud([01;31m[K*(*cloud_buffer.begin())[m[K, "base_link", pc_ndt_pub);
      |                            [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~[m[K
      |                            [01;31m[K|[m[K
      |                            [01;31m[Kpcl::PointCloud<pcl::PointXYZ>[m[K
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:56:89:[m[K [01;36m[Knote: [m[K  initializing argument 1 of â€˜[01m[Kvoid PointCloudProcessor::publish_pointcloud(const Ptr&, const string&, ros::Publisher&)[m[Kâ€™
   56 | void PointCloudProcessor::publish_pointcloud([01;36m[Kconst pcl::PointCloud<pcl::PointXYZ>::Ptr &points[m[K,
      |                                              [01;36m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~[m[K
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:446:28:[m[K [01;31m[Kerror: [m[Kcannot convert â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst Ptr&[m[Kâ€™ {aka â€˜[01m[Kconst boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >&[m[Kâ€™}
  446 |         publish_pointcloud([01;31m[K*transformed_cloud[m[K, "base_link", pc_icp_pub);
      |                            [01;31m[K^~~~~~~~~~~~~~~~~~[m[K
      |                            [01;31m[K|[m[K
      |                            [01;31m[Kpcl::PointCloud<pcl::PointXYZ>[m[K
[01m[K/home/kiyi/lidar_slam_ws/src/lidar_slam/src/point_process.cpp:56:89:[m[K [01;36m[Knote: [m[K  initializing argument 1 of â€˜[01m[Kvoid PointCloudProcessor::publish_pointcloud(const Ptr&, const string&, ros::Publisher&)[m[Kâ€™
   56 | void PointCloudProcessor::publish_pointcloud([01;36m[Kconst pcl::PointCloud<pcl::PointXYZ>::Ptr &points[m[K,
      |                                              [01;36m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~[m[K
make[2]: *** [CMakeFiles/lidar_slam.dir/build.make:76ï¼šCMakeFiles/lidar_slam.dir/src/point_process.cpp.o] é”™è¯¯ 1
make[1]: *** [CMakeFiles/Makefile2:2297ï¼šCMakeFiles/lidar_slam.dir/all] é”™è¯¯ 2
make: *** [Makefile:141ï¼šall] é”™è¯¯ 2
